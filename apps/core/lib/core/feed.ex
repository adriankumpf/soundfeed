defmodule Core.Feed do
  use Timex

  alias Core.Schemas.{Track, User}

  @desc_length Application.get_env(:core, :feed_item_desc_length)
  @desc "Generated by SoundFeed: https://github.com/adriankumpf/soundfeed"

  def build(tracks, type, %User{id: id, username: name, permalink_url: user_link}) do
    items =
      tracks
      |> Enum.map(fn %Track{title: title, desc: desc, permalink_url: track_link} ->
        """
        <item>
          <title><![CDATA[#{title}]]></title>
          <description><![CDATA[#{shorten_description(desc)}]]></description>
          <link>#{track_link}</link>
          <guid>#{track_link}?user=#{id}</guid>
        </item>
        """
      end)
      |> Enum.join("\n")

    """
    <?xml version="1.0" encoding="utf-8"?>
    <rss version="2.0">
      <channel>
        <title>#{name} - #{type}</title>
        <link>#{user_link}</link>
        <description>#{@desc}</description>
        <lastBuildDate>#{now()}</lastBuildDate>
        #{items}
      </channel>
    </rss>
    """
  end

  defp now do
    Timex.format!(Timex.now(), "{RFC1123}")
  end

  defp shorten_description(nil), do: ""

  defp shorten_description(desc) when byte_size(desc) > @desc_length do
    with {desc, _} = String.split_at(desc, @desc_length), do: desc <> "..."
  end

  defp shorten_description(desc), do: desc
end
