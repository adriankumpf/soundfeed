defmodule Core.Feed do
  alias Core.Client
  alias Core.Feed.{Helper, RSS}
  alias Core.Schemas.{Track, User}

  @type t :: RSS.feed()

  @desc """
  Generated by SoundFeed:
  https://github.com/adriankumpf/soundfeed
  """

  @spec build([Track.t()], Client.type(), User.t()) :: t
  def build(tracks, type, %User{id: id, username: name, permalink_url: url}) do
    title = "#{name} - #{Atom.to_string(type)}"
    now = Helper.now_rfc1123()

    channel = RSS.channel(title, url, @desc, now)
    items = Enum.map(tracks, &create_item(&1, id))

    RSS.feed(channel, items)
  end

  @spec create_item(Track.t(), User.id()) :: RSS.item()
  defp create_item(%Track{title: title, desc: desc, permalink_url: url}, id) do
    guid = url <> "?user=#{id}"
    RSS.item(title, desc, url, guid)
  end
end
